// Generated by gencpp from file skiros2_msgs/Condition.msg
// DO NOT EDIT!


#ifndef SKIROS2_MSGS_MESSAGE_CONDITION_H
#define SKIROS2_MSGS_MESSAGE_CONDITION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace skiros2_msgs
{
template <class ContainerAllocator>
struct Condition_
{
  typedef Condition_<ContainerAllocator> Type;

  Condition_()
    : type()
    , label()
    , subject()
    , predicate()
    , object()
    , state(false)  {
    }
  Condition_(const ContainerAllocator& _alloc)
    : type(_alloc)
    , label(_alloc)
    , subject(_alloc)
    , predicate(_alloc)
    , object(_alloc)
    , state(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _label_type;
  _label_type label;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _subject_type;
  _subject_type subject;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _predicate_type;
  _predicate_type predicate;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _object_type;
  _object_type object;

   typedef uint8_t _state_type;
  _state_type state;





  typedef boost::shared_ptr< ::skiros2_msgs::Condition_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::skiros2_msgs::Condition_<ContainerAllocator> const> ConstPtr;

}; // struct Condition_

typedef ::skiros2_msgs::Condition_<std::allocator<void> > Condition;

typedef boost::shared_ptr< ::skiros2_msgs::Condition > ConditionPtr;
typedef boost::shared_ptr< ::skiros2_msgs::Condition const> ConditionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::skiros2_msgs::Condition_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::skiros2_msgs::Condition_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::skiros2_msgs::Condition_<ContainerAllocator1> & lhs, const ::skiros2_msgs::Condition_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.label == rhs.label &&
    lhs.subject == rhs.subject &&
    lhs.predicate == rhs.predicate &&
    lhs.object == rhs.object &&
    lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::skiros2_msgs::Condition_<ContainerAllocator1> & lhs, const ::skiros2_msgs::Condition_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace skiros2_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::skiros2_msgs::Condition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::skiros2_msgs::Condition_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::skiros2_msgs::Condition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::skiros2_msgs::Condition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::skiros2_msgs::Condition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::skiros2_msgs::Condition_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::skiros2_msgs::Condition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bb14a9ac922b0de986bc6c6a486485a0";
  }

  static const char* value(const ::skiros2_msgs::Condition_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbb14a9ac922b0de9ULL;
  static const uint64_t static_value2 = 0x86bc6c6a486485a0ULL;
};

template<class ContainerAllocator>
struct DataType< ::skiros2_msgs::Condition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "skiros2_msgs/Condition";
  }

  static const char* value(const ::skiros2_msgs::Condition_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::skiros2_msgs::Condition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string type\n"
"string label\n"
"string subject\n"
"string predicate\n"
"string object\n"
"bool state\n"
;
  }

  static const char* value(const ::skiros2_msgs::Condition_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::skiros2_msgs::Condition_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.label);
      stream.next(m.subject);
      stream.next(m.predicate);
      stream.next(m.object);
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Condition_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::skiros2_msgs::Condition_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::skiros2_msgs::Condition_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.type);
    s << indent << "label: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.label);
    s << indent << "subject: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.subject);
    s << indent << "predicate: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.predicate);
    s << indent << "object: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.object);
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SKIROS2_MSGS_MESSAGE_CONDITION_H
