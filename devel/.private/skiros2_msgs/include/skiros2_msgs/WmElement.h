// Generated by gencpp from file skiros2_msgs/WmElement.msg
// DO NOT EDIT!


#ifndef SKIROS2_MSGS_MESSAGE_WMELEMENT_H
#define SKIROS2_MSGS_MESSAGE_WMELEMENT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <skiros2_msgs/Property.h>
#include <skiros2_msgs/Relation.h>

namespace skiros2_msgs
{
template <class ContainerAllocator>
struct WmElement_
{
  typedef WmElement_<ContainerAllocator> Type;

  WmElement_()
    : id()
    , type()
    , label()
    , properties()
    , relations()  {
    }
  WmElement_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , type(_alloc)
    , label(_alloc)
    , properties(_alloc)
    , relations(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _label_type;
  _label_type label;

   typedef std::vector< ::skiros2_msgs::Property_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::skiros2_msgs::Property_<ContainerAllocator> >> _properties_type;
  _properties_type properties;

   typedef std::vector< ::skiros2_msgs::Relation_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::skiros2_msgs::Relation_<ContainerAllocator> >> _relations_type;
  _relations_type relations;





  typedef boost::shared_ptr< ::skiros2_msgs::WmElement_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::skiros2_msgs::WmElement_<ContainerAllocator> const> ConstPtr;

}; // struct WmElement_

typedef ::skiros2_msgs::WmElement_<std::allocator<void> > WmElement;

typedef boost::shared_ptr< ::skiros2_msgs::WmElement > WmElementPtr;
typedef boost::shared_ptr< ::skiros2_msgs::WmElement const> WmElementConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::skiros2_msgs::WmElement_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::skiros2_msgs::WmElement_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::skiros2_msgs::WmElement_<ContainerAllocator1> & lhs, const ::skiros2_msgs::WmElement_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.type == rhs.type &&
    lhs.label == rhs.label &&
    lhs.properties == rhs.properties &&
    lhs.relations == rhs.relations;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::skiros2_msgs::WmElement_<ContainerAllocator1> & lhs, const ::skiros2_msgs::WmElement_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace skiros2_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::skiros2_msgs::WmElement_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::skiros2_msgs::WmElement_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::skiros2_msgs::WmElement_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::skiros2_msgs::WmElement_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::skiros2_msgs::WmElement_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::skiros2_msgs::WmElement_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::skiros2_msgs::WmElement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0fefbd22eac0424cfa1c8871ee3990af";
  }

  static const char* value(const ::skiros2_msgs::WmElement_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0fefbd22eac0424cULL;
  static const uint64_t static_value2 = 0xfa1c8871ee3990afULL;
};

template<class ContainerAllocator>
struct DataType< ::skiros2_msgs::WmElement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "skiros2_msgs/WmElement";
  }

  static const char* value(const ::skiros2_msgs::WmElement_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::skiros2_msgs::WmElement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string id\n"
"string type\n"
"string label\n"
"Property[] properties\n"
"Relation[] relations\n"
"\n"
"================================================================================\n"
"MSG: skiros2_msgs/Property\n"
"string key\n"
"string dataValue\n"
"string dataType\n"
"\n"
"================================================================================\n"
"MSG: skiros2_msgs/Relation\n"
"string subjectId\n"
"string predicate\n"
"string objectId\n"
;
  }

  static const char* value(const ::skiros2_msgs::WmElement_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::skiros2_msgs::WmElement_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.type);
      stream.next(m.label);
      stream.next(m.properties);
      stream.next(m.relations);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WmElement_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::skiros2_msgs::WmElement_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::skiros2_msgs::WmElement_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.id);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.type);
    s << indent << "label: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.label);
    s << indent << "properties[]" << std::endl;
    for (size_t i = 0; i < v.properties.size(); ++i)
    {
      s << indent << "  properties[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::skiros2_msgs::Property_<ContainerAllocator> >::stream(s, indent + "    ", v.properties[i]);
    }
    s << indent << "relations[]" << std::endl;
    for (size_t i = 0; i < v.relations.size(); ++i)
    {
      s << indent << "  relations[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::skiros2_msgs::Relation_<ContainerAllocator> >::stream(s, indent + "    ", v.relations[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SKIROS2_MSGS_MESSAGE_WMELEMENT_H
