// Generated by gencpp from file skiros2_msgs/WoQueryResponse.msg
// DO NOT EDIT!


#ifndef SKIROS2_MSGS_MESSAGE_WOQUERYRESPONSE_H
#define SKIROS2_MSGS_MESSAGE_WOQUERYRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace skiros2_msgs
{
template <class ContainerAllocator>
struct WoQueryResponse_
{
  typedef WoQueryResponse_<ContainerAllocator> Type;

  WoQueryResponse_()
    : answer()  {
    }
  WoQueryResponse_(const ContainerAllocator& _alloc)
    : answer(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _answer_type;
  _answer_type answer;





  typedef boost::shared_ptr< ::skiros2_msgs::WoQueryResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::skiros2_msgs::WoQueryResponse_<ContainerAllocator> const> ConstPtr;

}; // struct WoQueryResponse_

typedef ::skiros2_msgs::WoQueryResponse_<std::allocator<void> > WoQueryResponse;

typedef boost::shared_ptr< ::skiros2_msgs::WoQueryResponse > WoQueryResponsePtr;
typedef boost::shared_ptr< ::skiros2_msgs::WoQueryResponse const> WoQueryResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::skiros2_msgs::WoQueryResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::skiros2_msgs::WoQueryResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::skiros2_msgs::WoQueryResponse_<ContainerAllocator1> & lhs, const ::skiros2_msgs::WoQueryResponse_<ContainerAllocator2> & rhs)
{
  return lhs.answer == rhs.answer;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::skiros2_msgs::WoQueryResponse_<ContainerAllocator1> & lhs, const ::skiros2_msgs::WoQueryResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace skiros2_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::skiros2_msgs::WoQueryResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::skiros2_msgs::WoQueryResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::skiros2_msgs::WoQueryResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::skiros2_msgs::WoQueryResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::skiros2_msgs::WoQueryResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::skiros2_msgs::WoQueryResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::skiros2_msgs::WoQueryResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b064fb0dbfe4fa28872303bf43abb2c5";
  }

  static const char* value(const ::skiros2_msgs::WoQueryResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb064fb0dbfe4fa28ULL;
  static const uint64_t static_value2 = 0x872303bf43abb2c5ULL;
};

template<class ContainerAllocator>
struct DataType< ::skiros2_msgs::WoQueryResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "skiros2_msgs/WoQueryResponse";
  }

  static const char* value(const ::skiros2_msgs::WoQueryResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::skiros2_msgs::WoQueryResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Owl answer (with matches separated by endline)\n"
"string[] answer\n"
"\n"
;
  }

  static const char* value(const ::skiros2_msgs::WoQueryResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::skiros2_msgs::WoQueryResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.answer);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WoQueryResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::skiros2_msgs::WoQueryResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::skiros2_msgs::WoQueryResponse_<ContainerAllocator>& v)
  {
    s << indent << "answer[]" << std::endl;
    for (size_t i = 0; i < v.answer.size(); ++i)
    {
      s << indent << "  answer[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.answer[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SKIROS2_MSGS_MESSAGE_WOQUERYRESPONSE_H
