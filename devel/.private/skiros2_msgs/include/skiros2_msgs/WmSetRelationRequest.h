// Generated by gencpp from file skiros2_msgs/WmSetRelationRequest.msg
// DO NOT EDIT!


#ifndef SKIROS2_MSGS_MESSAGE_WMSETRELATIONREQUEST_H
#define SKIROS2_MSGS_MESSAGE_WMSETRELATIONREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <skiros2_msgs/Relation.h>

namespace skiros2_msgs
{
template <class ContainerAllocator>
struct WmSetRelationRequest_
{
  typedef WmSetRelationRequest_<ContainerAllocator> Type;

  WmSetRelationRequest_()
    : author()
    , relation()
    , value(false)  {
    }
  WmSetRelationRequest_(const ContainerAllocator& _alloc)
    : author(_alloc)
    , relation(_alloc)
    , value(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _author_type;
  _author_type author;

   typedef  ::skiros2_msgs::Relation_<ContainerAllocator>  _relation_type;
  _relation_type relation;

   typedef uint8_t _value_type;
  _value_type value;





  typedef boost::shared_ptr< ::skiros2_msgs::WmSetRelationRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::skiros2_msgs::WmSetRelationRequest_<ContainerAllocator> const> ConstPtr;

}; // struct WmSetRelationRequest_

typedef ::skiros2_msgs::WmSetRelationRequest_<std::allocator<void> > WmSetRelationRequest;

typedef boost::shared_ptr< ::skiros2_msgs::WmSetRelationRequest > WmSetRelationRequestPtr;
typedef boost::shared_ptr< ::skiros2_msgs::WmSetRelationRequest const> WmSetRelationRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::skiros2_msgs::WmSetRelationRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::skiros2_msgs::WmSetRelationRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::skiros2_msgs::WmSetRelationRequest_<ContainerAllocator1> & lhs, const ::skiros2_msgs::WmSetRelationRequest_<ContainerAllocator2> & rhs)
{
  return lhs.author == rhs.author &&
    lhs.relation == rhs.relation &&
    lhs.value == rhs.value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::skiros2_msgs::WmSetRelationRequest_<ContainerAllocator1> & lhs, const ::skiros2_msgs::WmSetRelationRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace skiros2_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::skiros2_msgs::WmSetRelationRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::skiros2_msgs::WmSetRelationRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::skiros2_msgs::WmSetRelationRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::skiros2_msgs::WmSetRelationRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::skiros2_msgs::WmSetRelationRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::skiros2_msgs::WmSetRelationRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::skiros2_msgs::WmSetRelationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "44689b3467290480eb7cf5a420ca4d7c";
  }

  static const char* value(const ::skiros2_msgs::WmSetRelationRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x44689b3467290480ULL;
  static const uint64_t static_value2 = 0xeb7cf5a420ca4d7cULL;
};

template<class ContainerAllocator>
struct DataType< ::skiros2_msgs::WmSetRelationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "skiros2_msgs/WmSetRelationRequest";
  }

  static const char* value(const ::skiros2_msgs::WmSetRelationRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::skiros2_msgs::WmSetRelationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string author\n"
"Relation relation\n"
"bool value\n"
"\n"
"================================================================================\n"
"MSG: skiros2_msgs/Relation\n"
"string subjectId\n"
"string predicate\n"
"string objectId\n"
;
  }

  static const char* value(const ::skiros2_msgs::WmSetRelationRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::skiros2_msgs::WmSetRelationRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.author);
      stream.next(m.relation);
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WmSetRelationRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::skiros2_msgs::WmSetRelationRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::skiros2_msgs::WmSetRelationRequest_<ContainerAllocator>& v)
  {
    s << indent << "author: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.author);
    s << indent << "relation: ";
    s << std::endl;
    Printer< ::skiros2_msgs::Relation_<ContainerAllocator> >::stream(s, indent + "  ", v.relation);
    s << indent << "value: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SKIROS2_MSGS_MESSAGE_WMSETRELATIONREQUEST_H
