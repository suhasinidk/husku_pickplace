// Generated by gencpp from file skiros2_msgs/WmGetResponse.msg
// DO NOT EDIT!


#ifndef SKIROS2_MSGS_MESSAGE_WMGETRESPONSE_H
#define SKIROS2_MSGS_MESSAGE_WMGETRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <skiros2_msgs/WmElement.h>

namespace skiros2_msgs
{
template <class ContainerAllocator>
struct WmGetResponse_
{
  typedef WmGetResponse_<ContainerAllocator> Type;

  WmGetResponse_()
    : snapshot_id()
    , elements()  {
    }
  WmGetResponse_(const ContainerAllocator& _alloc)
    : snapshot_id(_alloc)
    , elements(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _snapshot_id_type;
  _snapshot_id_type snapshot_id;

   typedef std::vector< ::skiros2_msgs::WmElement_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::skiros2_msgs::WmElement_<ContainerAllocator> >> _elements_type;
  _elements_type elements;





  typedef boost::shared_ptr< ::skiros2_msgs::WmGetResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::skiros2_msgs::WmGetResponse_<ContainerAllocator> const> ConstPtr;

}; // struct WmGetResponse_

typedef ::skiros2_msgs::WmGetResponse_<std::allocator<void> > WmGetResponse;

typedef boost::shared_ptr< ::skiros2_msgs::WmGetResponse > WmGetResponsePtr;
typedef boost::shared_ptr< ::skiros2_msgs::WmGetResponse const> WmGetResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::skiros2_msgs::WmGetResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::skiros2_msgs::WmGetResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::skiros2_msgs::WmGetResponse_<ContainerAllocator1> & lhs, const ::skiros2_msgs::WmGetResponse_<ContainerAllocator2> & rhs)
{
  return lhs.snapshot_id == rhs.snapshot_id &&
    lhs.elements == rhs.elements;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::skiros2_msgs::WmGetResponse_<ContainerAllocator1> & lhs, const ::skiros2_msgs::WmGetResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace skiros2_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::skiros2_msgs::WmGetResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::skiros2_msgs::WmGetResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::skiros2_msgs::WmGetResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::skiros2_msgs::WmGetResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::skiros2_msgs::WmGetResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::skiros2_msgs::WmGetResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::skiros2_msgs::WmGetResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "003bbf6f7591f47275b870fefed73403";
  }

  static const char* value(const ::skiros2_msgs::WmGetResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x003bbf6f7591f472ULL;
  static const uint64_t static_value2 = 0x75b870fefed73403ULL;
};

template<class ContainerAllocator>
struct DataType< ::skiros2_msgs::WmGetResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "skiros2_msgs/WmGetResponse";
  }

  static const char* value(const ::skiros2_msgs::WmGetResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::skiros2_msgs::WmGetResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string snapshot_id\n"
"WmElement[] elements\n"
"\n"
"\n"
"================================================================================\n"
"MSG: skiros2_msgs/WmElement\n"
"string id\n"
"string type\n"
"string label\n"
"Property[] properties\n"
"Relation[] relations\n"
"\n"
"================================================================================\n"
"MSG: skiros2_msgs/Property\n"
"string key\n"
"string dataValue\n"
"string dataType\n"
"\n"
"================================================================================\n"
"MSG: skiros2_msgs/Relation\n"
"string subjectId\n"
"string predicate\n"
"string objectId\n"
;
  }

  static const char* value(const ::skiros2_msgs::WmGetResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::skiros2_msgs::WmGetResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.snapshot_id);
      stream.next(m.elements);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WmGetResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::skiros2_msgs::WmGetResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::skiros2_msgs::WmGetResponse_<ContainerAllocator>& v)
  {
    s << indent << "snapshot_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.snapshot_id);
    s << indent << "elements[]" << std::endl;
    for (size_t i = 0; i < v.elements.size(); ++i)
    {
      s << indent << "  elements[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::skiros2_msgs::WmElement_<ContainerAllocator> >::stream(s, indent + "    ", v.elements[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SKIROS2_MSGS_MESSAGE_WMGETRESPONSE_H
