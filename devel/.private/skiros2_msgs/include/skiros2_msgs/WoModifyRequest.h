// Generated by gencpp from file skiros2_msgs/WoModifyRequest.msg
// DO NOT EDIT!


#ifndef SKIROS2_MSGS_MESSAGE_WOMODIFYREQUEST_H
#define SKIROS2_MSGS_MESSAGE_WOMODIFYREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <skiros2_msgs/Statement.h>

namespace skiros2_msgs
{
template <class ContainerAllocator>
struct WoModifyRequest_
{
  typedef WoModifyRequest_<ContainerAllocator> Type;

  WoModifyRequest_()
    : author()
    , context()
    , statements()  {
    }
  WoModifyRequest_(const ContainerAllocator& _alloc)
    : author(_alloc)
    , context(_alloc)
    , statements(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _author_type;
  _author_type author;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _context_type;
  _context_type context;

   typedef std::vector< ::skiros2_msgs::Statement_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::skiros2_msgs::Statement_<ContainerAllocator> >> _statements_type;
  _statements_type statements;





  typedef boost::shared_ptr< ::skiros2_msgs::WoModifyRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::skiros2_msgs::WoModifyRequest_<ContainerAllocator> const> ConstPtr;

}; // struct WoModifyRequest_

typedef ::skiros2_msgs::WoModifyRequest_<std::allocator<void> > WoModifyRequest;

typedef boost::shared_ptr< ::skiros2_msgs::WoModifyRequest > WoModifyRequestPtr;
typedef boost::shared_ptr< ::skiros2_msgs::WoModifyRequest const> WoModifyRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::skiros2_msgs::WoModifyRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::skiros2_msgs::WoModifyRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::skiros2_msgs::WoModifyRequest_<ContainerAllocator1> & lhs, const ::skiros2_msgs::WoModifyRequest_<ContainerAllocator2> & rhs)
{
  return lhs.author == rhs.author &&
    lhs.context == rhs.context &&
    lhs.statements == rhs.statements;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::skiros2_msgs::WoModifyRequest_<ContainerAllocator1> & lhs, const ::skiros2_msgs::WoModifyRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace skiros2_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::skiros2_msgs::WoModifyRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::skiros2_msgs::WoModifyRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::skiros2_msgs::WoModifyRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::skiros2_msgs::WoModifyRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::skiros2_msgs::WoModifyRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::skiros2_msgs::WoModifyRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::skiros2_msgs::WoModifyRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ae5ca50ece4044e5cd8d6e80e9e08383";
  }

  static const char* value(const ::skiros2_msgs::WoModifyRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xae5ca50ece4044e5ULL;
  static const uint64_t static_value2 = 0xcd8d6e80e9e08383ULL;
};

template<class ContainerAllocator>
struct DataType< ::skiros2_msgs::WoModifyRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "skiros2_msgs/WoModifyRequest";
  }

  static const char* value(const ::skiros2_msgs::WoModifyRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::skiros2_msgs::WoModifyRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string author\n"
"string context\n"
"Statement[] statements\n"
"\n"
"================================================================================\n"
"MSG: skiros2_msgs/Statement\n"
"Relation relation\n"
"bool value\n"
"\n"
"================================================================================\n"
"MSG: skiros2_msgs/Relation\n"
"string subjectId\n"
"string predicate\n"
"string objectId\n"
;
  }

  static const char* value(const ::skiros2_msgs::WoModifyRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::skiros2_msgs::WoModifyRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.author);
      stream.next(m.context);
      stream.next(m.statements);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WoModifyRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::skiros2_msgs::WoModifyRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::skiros2_msgs::WoModifyRequest_<ContainerAllocator>& v)
  {
    s << indent << "author: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.author);
    s << indent << "context: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.context);
    s << indent << "statements[]" << std::endl;
    for (size_t i = 0; i < v.statements.size(); ++i)
    {
      s << indent << "  statements[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::skiros2_msgs::Statement_<ContainerAllocator> >::stream(s, indent + "    ", v.statements[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SKIROS2_MSGS_MESSAGE_WOMODIFYREQUEST_H
