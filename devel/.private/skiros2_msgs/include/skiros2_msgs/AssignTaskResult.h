// Generated by gencpp from file skiros2_msgs/AssignTaskResult.msg
// DO NOT EDIT!


#ifndef SKIROS2_MSGS_MESSAGE_ASSIGNTASKRESULT_H
#define SKIROS2_MSGS_MESSAGE_ASSIGNTASKRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace skiros2_msgs
{
template <class ContainerAllocator>
struct AssignTaskResult_
{
  typedef AssignTaskResult_<ContainerAllocator> Type;

  AssignTaskResult_()
    : progress_code(0)
    , progress_message()  {
    }
  AssignTaskResult_(const ContainerAllocator& _alloc)
    : progress_code(0)
    , progress_message(_alloc)  {
  (void)_alloc;
    }



   typedef int16_t _progress_code_type;
  _progress_code_type progress_code;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _progress_message_type;
  _progress_message_type progress_message;





  typedef boost::shared_ptr< ::skiros2_msgs::AssignTaskResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::skiros2_msgs::AssignTaskResult_<ContainerAllocator> const> ConstPtr;

}; // struct AssignTaskResult_

typedef ::skiros2_msgs::AssignTaskResult_<std::allocator<void> > AssignTaskResult;

typedef boost::shared_ptr< ::skiros2_msgs::AssignTaskResult > AssignTaskResultPtr;
typedef boost::shared_ptr< ::skiros2_msgs::AssignTaskResult const> AssignTaskResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::skiros2_msgs::AssignTaskResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::skiros2_msgs::AssignTaskResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::skiros2_msgs::AssignTaskResult_<ContainerAllocator1> & lhs, const ::skiros2_msgs::AssignTaskResult_<ContainerAllocator2> & rhs)
{
  return lhs.progress_code == rhs.progress_code &&
    lhs.progress_message == rhs.progress_message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::skiros2_msgs::AssignTaskResult_<ContainerAllocator1> & lhs, const ::skiros2_msgs::AssignTaskResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace skiros2_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::skiros2_msgs::AssignTaskResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::skiros2_msgs::AssignTaskResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::skiros2_msgs::AssignTaskResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::skiros2_msgs::AssignTaskResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::skiros2_msgs::AssignTaskResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::skiros2_msgs::AssignTaskResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::skiros2_msgs::AssignTaskResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "618c38785819b45ec2970116048e0af3";
  }

  static const char* value(const ::skiros2_msgs::AssignTaskResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x618c38785819b45eULL;
  static const uint64_t static_value2 = 0xc2970116048e0af3ULL;
};

template<class ContainerAllocator>
struct DataType< ::skiros2_msgs::AssignTaskResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "skiros2_msgs/AssignTaskResult";
  }

  static const char* value(const ::skiros2_msgs::AssignTaskResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::skiros2_msgs::AssignTaskResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"int16 progress_code\n"
"string progress_message\n"
;
  }

  static const char* value(const ::skiros2_msgs::AssignTaskResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::skiros2_msgs::AssignTaskResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.progress_code);
      stream.next(m.progress_message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AssignTaskResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::skiros2_msgs::AssignTaskResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::skiros2_msgs::AssignTaskResult_<ContainerAllocator>& v)
  {
    s << indent << "progress_code: ";
    Printer<int16_t>::stream(s, indent + "  ", v.progress_code);
    s << indent << "progress_message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.progress_message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SKIROS2_MSGS_MESSAGE_ASSIGNTASKRESULT_H
