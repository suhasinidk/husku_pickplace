// Generated by gencpp from file skiros2_msgs/WmQueryRelationsRequest.msg
// DO NOT EDIT!


#ifndef SKIROS2_MSGS_MESSAGE_WMQUERYRELATIONSREQUEST_H
#define SKIROS2_MSGS_MESSAGE_WMQUERYRELATIONSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <skiros2_msgs/Relation.h>

namespace skiros2_msgs
{
template <class ContainerAllocator>
struct WmQueryRelationsRequest_
{
  typedef WmQueryRelationsRequest_<ContainerAllocator> Type;

  WmQueryRelationsRequest_()
    : relation()  {
    }
  WmQueryRelationsRequest_(const ContainerAllocator& _alloc)
    : relation(_alloc)  {
  (void)_alloc;
    }



   typedef  ::skiros2_msgs::Relation_<ContainerAllocator>  _relation_type;
  _relation_type relation;





  typedef boost::shared_ptr< ::skiros2_msgs::WmQueryRelationsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::skiros2_msgs::WmQueryRelationsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct WmQueryRelationsRequest_

typedef ::skiros2_msgs::WmQueryRelationsRequest_<std::allocator<void> > WmQueryRelationsRequest;

typedef boost::shared_ptr< ::skiros2_msgs::WmQueryRelationsRequest > WmQueryRelationsRequestPtr;
typedef boost::shared_ptr< ::skiros2_msgs::WmQueryRelationsRequest const> WmQueryRelationsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::skiros2_msgs::WmQueryRelationsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::skiros2_msgs::WmQueryRelationsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::skiros2_msgs::WmQueryRelationsRequest_<ContainerAllocator1> & lhs, const ::skiros2_msgs::WmQueryRelationsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.relation == rhs.relation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::skiros2_msgs::WmQueryRelationsRequest_<ContainerAllocator1> & lhs, const ::skiros2_msgs::WmQueryRelationsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace skiros2_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::skiros2_msgs::WmQueryRelationsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::skiros2_msgs::WmQueryRelationsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::skiros2_msgs::WmQueryRelationsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::skiros2_msgs::WmQueryRelationsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::skiros2_msgs::WmQueryRelationsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::skiros2_msgs::WmQueryRelationsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::skiros2_msgs::WmQueryRelationsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1d5c24fa09f95142cb536e02896dc748";
  }

  static const char* value(const ::skiros2_msgs::WmQueryRelationsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1d5c24fa09f95142ULL;
  static const uint64_t static_value2 = 0xcb536e02896dc748ULL;
};

template<class ContainerAllocator>
struct DataType< ::skiros2_msgs::WmQueryRelationsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "skiros2_msgs/WmQueryRelationsRequest";
  }

  static const char* value(const ::skiros2_msgs::WmQueryRelationsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::skiros2_msgs::WmQueryRelationsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Relation relation\n"
"\n"
"================================================================================\n"
"MSG: skiros2_msgs/Relation\n"
"string subjectId\n"
"string predicate\n"
"string objectId\n"
;
  }

  static const char* value(const ::skiros2_msgs::WmQueryRelationsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::skiros2_msgs::WmQueryRelationsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.relation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WmQueryRelationsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::skiros2_msgs::WmQueryRelationsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::skiros2_msgs::WmQueryRelationsRequest_<ContainerAllocator>& v)
  {
    s << indent << "relation: ";
    s << std::endl;
    Printer< ::skiros2_msgs::Relation_<ContainerAllocator> >::stream(s, indent + "  ", v.relation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SKIROS2_MSGS_MESSAGE_WMQUERYRELATIONSREQUEST_H
