// Generated by gencpp from file skiros2_msgs/WoLoadAndSaveRequest.msg
// DO NOT EDIT!


#ifndef SKIROS2_MSGS_MESSAGE_WOLOADANDSAVEREQUEST_H
#define SKIROS2_MSGS_MESSAGE_WOLOADANDSAVEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace skiros2_msgs
{
template <class ContainerAllocator>
struct WoLoadAndSaveRequest_
{
  typedef WoLoadAndSaveRequest_<ContainerAllocator> Type;

  WoLoadAndSaveRequest_()
    : action()
    , filename()
    , context()  {
    }
  WoLoadAndSaveRequest_(const ContainerAllocator& _alloc)
    : action(_alloc)
    , filename(_alloc)
    , context(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _action_type;
  _action_type action;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _filename_type;
  _filename_type filename;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _context_type;
  _context_type context;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(LOAD)
  #undef LOAD
#endif
#if defined(_WIN32) && defined(SAVE)
  #undef SAVE
#endif


  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> LOAD;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> SAVE;

  typedef boost::shared_ptr< ::skiros2_msgs::WoLoadAndSaveRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::skiros2_msgs::WoLoadAndSaveRequest_<ContainerAllocator> const> ConstPtr;

}; // struct WoLoadAndSaveRequest_

typedef ::skiros2_msgs::WoLoadAndSaveRequest_<std::allocator<void> > WoLoadAndSaveRequest;

typedef boost::shared_ptr< ::skiros2_msgs::WoLoadAndSaveRequest > WoLoadAndSaveRequestPtr;
typedef boost::shared_ptr< ::skiros2_msgs::WoLoadAndSaveRequest const> WoLoadAndSaveRequestConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      WoLoadAndSaveRequest_<ContainerAllocator>::LOAD =
        
          "load"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      WoLoadAndSaveRequest_<ContainerAllocator>::SAVE =
        
          "save"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::skiros2_msgs::WoLoadAndSaveRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::skiros2_msgs::WoLoadAndSaveRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::skiros2_msgs::WoLoadAndSaveRequest_<ContainerAllocator1> & lhs, const ::skiros2_msgs::WoLoadAndSaveRequest_<ContainerAllocator2> & rhs)
{
  return lhs.action == rhs.action &&
    lhs.filename == rhs.filename &&
    lhs.context == rhs.context;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::skiros2_msgs::WoLoadAndSaveRequest_<ContainerAllocator1> & lhs, const ::skiros2_msgs::WoLoadAndSaveRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace skiros2_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::skiros2_msgs::WoLoadAndSaveRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::skiros2_msgs::WoLoadAndSaveRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::skiros2_msgs::WoLoadAndSaveRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::skiros2_msgs::WoLoadAndSaveRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::skiros2_msgs::WoLoadAndSaveRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::skiros2_msgs::WoLoadAndSaveRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::skiros2_msgs::WoLoadAndSaveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "08aac2998d0228a5ef6a11a56f143827";
  }

  static const char* value(const ::skiros2_msgs::WoLoadAndSaveRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x08aac2998d0228a5ULL;
  static const uint64_t static_value2 = 0xef6a11a56f143827ULL;
};

template<class ContainerAllocator>
struct DataType< ::skiros2_msgs::WoLoadAndSaveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "skiros2_msgs/WoLoadAndSaveRequest";
  }

  static const char* value(const ::skiros2_msgs::WoLoadAndSaveRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::skiros2_msgs::WoLoadAndSaveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Possible actions\n"
"string LOAD=load\n"
"string SAVE=save\n"
"\n"
"string action\n"
"string filename\n"
"string context\n"
;
  }

  static const char* value(const ::skiros2_msgs::WoLoadAndSaveRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::skiros2_msgs::WoLoadAndSaveRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action);
      stream.next(m.filename);
      stream.next(m.context);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WoLoadAndSaveRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::skiros2_msgs::WoLoadAndSaveRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::skiros2_msgs::WoLoadAndSaveRequest_<ContainerAllocator>& v)
  {
    s << indent << "action: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.action);
    s << indent << "filename: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.filename);
    s << indent << "context: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.context);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SKIROS2_MSGS_MESSAGE_WOLOADANDSAVEREQUEST_H
