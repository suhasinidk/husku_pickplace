// Generated by gencpp from file skiros2_msgs/Property.msg
// DO NOT EDIT!


#ifndef SKIROS2_MSGS_MESSAGE_PROPERTY_H
#define SKIROS2_MSGS_MESSAGE_PROPERTY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace skiros2_msgs
{
template <class ContainerAllocator>
struct Property_
{
  typedef Property_<ContainerAllocator> Type;

  Property_()
    : key()
    , dataValue()
    , dataType()  {
    }
  Property_(const ContainerAllocator& _alloc)
    : key(_alloc)
    , dataValue(_alloc)
    , dataType(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _key_type;
  _key_type key;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _dataValue_type;
  _dataValue_type dataValue;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _dataType_type;
  _dataType_type dataType;





  typedef boost::shared_ptr< ::skiros2_msgs::Property_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::skiros2_msgs::Property_<ContainerAllocator> const> ConstPtr;

}; // struct Property_

typedef ::skiros2_msgs::Property_<std::allocator<void> > Property;

typedef boost::shared_ptr< ::skiros2_msgs::Property > PropertyPtr;
typedef boost::shared_ptr< ::skiros2_msgs::Property const> PropertyConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::skiros2_msgs::Property_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::skiros2_msgs::Property_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::skiros2_msgs::Property_<ContainerAllocator1> & lhs, const ::skiros2_msgs::Property_<ContainerAllocator2> & rhs)
{
  return lhs.key == rhs.key &&
    lhs.dataValue == rhs.dataValue &&
    lhs.dataType == rhs.dataType;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::skiros2_msgs::Property_<ContainerAllocator1> & lhs, const ::skiros2_msgs::Property_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace skiros2_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::skiros2_msgs::Property_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::skiros2_msgs::Property_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::skiros2_msgs::Property_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::skiros2_msgs::Property_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::skiros2_msgs::Property_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::skiros2_msgs::Property_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::skiros2_msgs::Property_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5b6c0ddf599766e37ee213fe87f04771";
  }

  static const char* value(const ::skiros2_msgs::Property_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5b6c0ddf599766e3ULL;
  static const uint64_t static_value2 = 0x7ee213fe87f04771ULL;
};

template<class ContainerAllocator>
struct DataType< ::skiros2_msgs::Property_<ContainerAllocator> >
{
  static const char* value()
  {
    return "skiros2_msgs/Property";
  }

  static const char* value(const ::skiros2_msgs::Property_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::skiros2_msgs::Property_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string key\n"
"string dataValue\n"
"string dataType\n"
;
  }

  static const char* value(const ::skiros2_msgs::Property_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::skiros2_msgs::Property_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.key);
      stream.next(m.dataValue);
      stream.next(m.dataType);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Property_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::skiros2_msgs::Property_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::skiros2_msgs::Property_<ContainerAllocator>& v)
  {
    s << indent << "key: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.key);
    s << indent << "dataValue: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.dataValue);
    s << indent << "dataType: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.dataType);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SKIROS2_MSGS_MESSAGE_PROPERTY_H
