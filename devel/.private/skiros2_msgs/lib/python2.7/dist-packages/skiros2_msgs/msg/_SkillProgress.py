# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from skiros2_msgs/SkillProgress.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import skiros2_msgs.msg

class SkillProgress(genpy.Message):
  _md5sum = "14c02d9b9938298cf43e256d5d334a4c"
  _type = "skiros2_msgs/SkillProgress"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#Possible states
int16 SUCCESS=1
int16 FAILURE=2
int16 RUNNING=3
int16 IDLE=4

string robot
int16 task_id
int16 id
string parent_label
int16 parent_id
string type
string label
Param[] params
string processor
int16 state
int16 progress_code
float32 progress_period
float32 progress_time
string progress_message

================================================================================
MSG: skiros2_msgs/Param
string param"""
  # Pseudo-constants
  SUCCESS = 1
  FAILURE = 2
  RUNNING = 3
  IDLE = 4

  __slots__ = ['robot','task_id','id','parent_label','parent_id','type','label','params','processor','state','progress_code','progress_period','progress_time','progress_message']
  _slot_types = ['string','int16','int16','string','int16','string','string','skiros2_msgs/Param[]','string','int16','int16','float32','float32','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       robot,task_id,id,parent_label,parent_id,type,label,params,processor,state,progress_code,progress_period,progress_time,progress_message

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SkillProgress, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.robot is None:
        self.robot = ''
      if self.task_id is None:
        self.task_id = 0
      if self.id is None:
        self.id = 0
      if self.parent_label is None:
        self.parent_label = ''
      if self.parent_id is None:
        self.parent_id = 0
      if self.type is None:
        self.type = ''
      if self.label is None:
        self.label = ''
      if self.params is None:
        self.params = []
      if self.processor is None:
        self.processor = ''
      if self.state is None:
        self.state = 0
      if self.progress_code is None:
        self.progress_code = 0
      if self.progress_period is None:
        self.progress_period = 0.
      if self.progress_time is None:
        self.progress_time = 0.
      if self.progress_message is None:
        self.progress_message = ''
    else:
      self.robot = ''
      self.task_id = 0
      self.id = 0
      self.parent_label = ''
      self.parent_id = 0
      self.type = ''
      self.label = ''
      self.params = []
      self.processor = ''
      self.state = 0
      self.progress_code = 0
      self.progress_period = 0.
      self.progress_time = 0.
      self.progress_message = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.robot
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2h().pack(_x.task_id, _x.id))
      _x = self.parent_label
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.parent_id
      buff.write(_get_struct_h().pack(_x))
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.label
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.params)
      buff.write(_struct_I.pack(length))
      for val1 in self.params:
        _x = val1.param
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.processor
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2h2f().pack(_x.state, _x.progress_code, _x.progress_period, _x.progress_time))
      _x = self.progress_message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.params is None:
        self.params = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.robot = str[start:end]
      _x = self
      start = end
      end += 4
      (_x.task_id, _x.id,) = _get_struct_2h().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.parent_label = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.parent_label = str[start:end]
      start = end
      end += 2
      (self.parent_id,) = _get_struct_h().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.label = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.label = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.params = []
      for i in range(0, length):
        val1 = skiros2_msgs.msg.Param()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.param = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.param = str[start:end]
        self.params.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.processor = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.processor = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.state, _x.progress_code, _x.progress_period, _x.progress_time,) = _get_struct_2h2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.progress_message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.progress_message = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.robot
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2h().pack(_x.task_id, _x.id))
      _x = self.parent_label
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.parent_id
      buff.write(_get_struct_h().pack(_x))
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.label
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.params)
      buff.write(_struct_I.pack(length))
      for val1 in self.params:
        _x = val1.param
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.processor
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2h2f().pack(_x.state, _x.progress_code, _x.progress_period, _x.progress_time))
      _x = self.progress_message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.params is None:
        self.params = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.robot = str[start:end]
      _x = self
      start = end
      end += 4
      (_x.task_id, _x.id,) = _get_struct_2h().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.parent_label = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.parent_label = str[start:end]
      start = end
      end += 2
      (self.parent_id,) = _get_struct_h().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.label = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.label = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.params = []
      for i in range(0, length):
        val1 = skiros2_msgs.msg.Param()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.param = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.param = str[start:end]
        self.params.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.processor = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.processor = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.state, _x.progress_code, _x.progress_period, _x.progress_time,) = _get_struct_2h2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.progress_message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.progress_message = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2h = None
def _get_struct_2h():
    global _struct_2h
    if _struct_2h is None:
        _struct_2h = struct.Struct("<2h")
    return _struct_2h
_struct_2h2f = None
def _get_struct_2h2f():
    global _struct_2h2f
    if _struct_2h2f is None:
        _struct_2h2f = struct.Struct("<2h2f")
    return _struct_2h2f
_struct_h = None
def _get_struct_h():
    global _struct_h
    if _struct_h is None:
        _struct_h = struct.Struct("<h")
    return _struct_h
